name: Build and Test Distributions

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main ]
  release:
    types: [ created ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install build twine wheel setuptools>=68.0
        python -m pip install "tomli>=2.0.0;python_version<'3.11'"
    
    - name: Build distributions
      run: |
        python scripts/build.py build
    
    - name: Check distributions
      run: |
        python scripts/build.py check
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist-${{ matrix.os }}-py${{ matrix.python-version }}
        path: dist/
    
    - name: Test installation
      run: |
        # Create a new virtual environment for testing
        python -m venv test_env
        
        # Activate and install
        if [ "${{ matrix.os }}" == "windows-latest" ]; then
          test_env\\Scripts\\activate
          test_env\\Scripts\\pip install dist\\*.whl
          test_env\\Scripts\\pacc --version
        else
          source test_env/bin/activate
          pip install dist/*.whl
          pacc --version
        fi
      shell: bash

  publish:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install build twine
    
    - name: Build distributions
      run: |
        python scripts/build.py build
    
    - name: Publish to Test PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
      run: |
        python -m twine upload --repository testpypi dist/*
    
    - name: Publish to PyPI
      if: github.event.release.prerelease == false
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        python -m twine upload dist/*